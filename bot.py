import os
import time
import threading
import requests
from flask import Flask, request, abort
import telebot

# --- Configura√ß√µes e vari√°veis ambiente ---

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
SMSBOWER_API_TOKEN = os.getenv("SMSBOWER_API_TOKEN")
MERCADOPAGO_ACCESS_TOKEN = os.getenv("MERCADOPAGO_ACCESS_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    raise Exception("Vari√°vel de ambiente TELEGRAM_BOT_TOKEN n√£o definida!")

if not WEBHOOK_URL:
    raise Exception("Vari√°vel de ambiente WEBHOOK_URL n√£o definida!")

if not SMSBOWER_API_TOKEN:
    raise Exception("Vari√°vel de ambiente SMSBOWER_API_TOKEN n√£o definida!")

if not MERCADOPAGO_ACCESS_TOKEN:
    raise Exception("Vari√°vel de ambiente MERCADOPAGO_ACCESS_TOKEN n√£o definida!")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# Banco de dados simples em mem√≥ria para demo
USERS_SALDO = {}         # chat_id : saldo em float
ACTIVATIONS = {}         # chat_id : {'activationId': str, 'expires_at': timestamp, 'number': str}

# Timeout para expira√ß√£o dos n√∫meros (18 minutos = 1080 segundos)
NUMBER_TIMEOUT = 1080

# --- Fun√ß√µes para Mercado Pago ---

def criar_cobranca(chat_id, valor):
    url = "https://api.mercadopago.com/v1/payments"
    headers = {
        "Authorization": f"Bearer {MERCADOPAGO_ACCESS_TOKEN}",
        "Content-Type": "application/json",
        "X-Idempotency-Key": f"{chat_id}-{int(time.time())}"
    }
    body = {
        "transaction_amount": valor,
        "description": "Recarga SMS China Bot",
        "payment_method_id": "pix",
        "payer": {
            "email": f"user{chat_id}@example.com"
        }
    }
    resp = requests.post(url, json=body, headers=headers)
    if resp.status_code == 201:
        return resp.json()
    else:
        print("Erro criar cobran√ßa MP:", resp.text)
        return None

# --- Fun√ß√µes para SMSBower ---

def solicitar_numero_sms(chat_id):
    # Solicita um n√∫mero novo na API smsbower
    url = "https://smsbower.online/api/getNumber"
    params = {"apiToken": SMSBOWER_API_TOKEN, "service": "smschina"}
    resp = requests.get(url, params=params)
    if resp.status_code == 200:
        data = resp.json()
        if data.get("status") == "success":
            return data.get("number"), data.get("activationId")
    return None, None

def consultar_sms(activationId):
    # Consulta SMS recebido pela API
    url = f"https://smsbower.online/api/getSMS?apiToken={SMSBOWER_API_TOKEN}&activationId={activationId}"
    resp = requests.get(url)
    if resp.status_code == 200:
        data = resp.json()
        if data.get("status") == "success":
            return data.get("sms")
    return None

def cancelar_ativacao(activationId):
    url = f"https://smsbower.online/api/cancel?apiToken={SMSBOWER_API_TOKEN}&activationId={activationId}"
    requests.get(url)

# --- Comandos do bot ---

@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üëã Bem-vindo ao SMSChina Bot!\nEnvie o valor que deseja recarregar (ex: 2.50) para comprar saldo.")

@bot.message_handler(commands=["saldo"])
def cmd_saldo(message):
    chat_id = message.chat.id
    saldo = USERS_SALDO.get(chat_id, 0.0)
    bot.send_message(chat_id, f"üí∞ Seu saldo atual √©: R$ {saldo:.2f}")

@bot.message_handler(commands=["cancelar"])
def cmd_cancelar(message):
    chat_id = message.chat.id
    if chat_id in ACTIVATIONS:
        ativ = ACTIVATIONS.pop(chat_id)
        cancelar_ativacao(ativ['activationId'])
        bot.send_message(chat_id, "‚ùå Ativa√ß√£o cancelada e n√∫mero liberado.")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è Voc√™ n√£o tem ativa√ß√µes em andamento.")

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    # Se usu√°rio est√° com ativa√ß√£o pendente
    if chat_id in ACTIVATIONS:
        ativ = ACTIVATIONS[chat_id]
        if time.time() > ativ['expires_at']:
            # Expirou
            cancelar_ativacao(ativ['activationId'])
            ACTIVATIONS.pop(chat_id)
            bot.send_message(chat_id, "‚è≥ Tempo expirado para ativa√ß√£o. Por favor, solicite um novo n√∫mero.")
            return

        # Aqui pode tratar resposta com c√≥digo SMS se desejar (exemplo simplificado)
        bot.send_message(chat_id, "‚è≥ Estamos aguardando o SMS, aguarde...")

    else:
        # Se for n√∫mero decimal para recarga
        try:
            valor = float(text.replace(",", "."))
            if valor <= 0:
                raise ValueError
            # Cria cobran√ßa no Mercado Pago
            cobranca = criar_cobranca(chat_id, valor)
            if cobranca:
                qr_code = cobranca.get("point_of_interaction", {}).get("transaction_data", {}).get("qr_code_base64")
                link_pagamento = cobranca.get("transaction_details", {}).get("external_resource_url")
                if qr_code:
                    bot.send_photo(chat_id, photo=f"data:image/png;base64,{qr_code}", caption=f"üí∏ Pague via Pix para recarregar R$ {valor:.2f}\nAp√≥s o pagamento, seu saldo ser√° atualizado automaticamente.")
                elif link_pagamento:
                    bot.send_message(chat_id, f"üí∏ Pague aqui para recarregar R$ {valor:.2f}:\n{link_pagamento}")
                else:
                    bot.send_message(chat_id, "‚ùå N√£o foi poss√≠vel gerar o QR Code de pagamento.")
            else:
                bot.send_message(chat_id, "‚ùå Erro ao gerar cobran√ßa. Tente novamente.")
        except ValueError:
            # Se n√£o for n√∫mero, pode ser pedido para novo SMS
            if text.lower() == "novo sms":
                # Solicitar n√∫mero
                number, activationId = solicitar_numero_sms(chat_id)
                if number and activationId:
                    ACTIVATIONS[chat_id] = {
                        "activationId": activationId,
                        "number": number,
                        "expires_at": time.time() + NUMBER_TIMEOUT
                    }
                    bot.send_message(chat_id, f"üì≤ N√∫mero recebido: {number}\nVoc√™ tem 18 minutos para receber o SMS.\nEnvie /cancelar para cancelar a ativa√ß√£o.")
                else:
                    bot.send_message(chat_id, "‚ùå Erro ao solicitar n√∫mero. Tente novamente mais tarde.")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è Comando ou texto inv√°lido. Envie um valor para recarga ou 'novo sms' para receber n√∫mero.")

# --- Webhook Flask ---

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    else:
        abort(403)

# Setup webhook no in√≠cio (apenas uma vez)
def setup_webhook():
    res = bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_BOT_TOKEN}")
    print("Webhook set result:", res)

# --- Thread para verificar atualiza√ß√µes de SMS e atualizar saldo ---

def sms_check_thread():
    while True:
        time.sleep(10)
        to_remove = []
        for chat_id, ativ in ACTIVATIONS.items():
            sms = consultar_sms(ativ["activationId"])
            if sms:
                # Extrair c√≥digo do SMS, ex: "Seu c√≥digo √© 123456"
                codigo = None
                import re
                m = re.search(r"\b(\d{4,8})\b", sms)
                if m:
                    codigo = m.group(1)
                if codigo:
                    bot.send_message(chat_id, f"‚úÖ C√≥digo SMS recebido: {codigo}")
                    # Aqui voc√™ pode salvar esse c√≥digo para o usu√°rio ou continuar o fluxo
                    # Exemplo simples: remover ativa√ß√£o
                    to_remove.append(chat_id)
            # Se tempo expirou, cancela ativa√ß√£o
            if time.time() > ativ["expires_at"]:
                cancelar_ativacao(ativ["activationId"])
                to_remove.append(chat_id)
                bot.send_message(chat_id, "‚è≥ Tempo da ativa√ß√£o expirou, n√∫mero liberado.")

        for chat_id in to_remove:
            ACTIVATIONS.pop(chat_id, None)

# --- Inicia o servidor Flask e a thread do SMS check ---

if __name__ == "__main__":
    setup_webhook()
    threading.Thread(target=sms_check_thread, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
